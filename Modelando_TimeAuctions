setwd("D:/Documentos/Facu/Organizacion de Datos/TP2/Final_v3/")
# setwd("C:/Users/Marce/Documents/tp/Final_v2/")

datos_tot <- readRDS("Data_Set_Total_v3.rds")

datos_tot <- datos_tot[,!colnames(datos_tot) %in% c("ref_type_id","source_id")]

library(Metrics)

# Primero filtro para quedarme con los dispositivos con historial 

datos_tot <- subset(datos_tot,datos_tot$Tuvo_Auction==1)

table(datos_tot$ventana)

# Convierte categoricas en numericas 

library(StatMeasures)
contents(datos_tot)->resumen

nombres_cat <- resumen$variable[resumen$class == "character"]
nombres_cat

for(i in 1:length(nombres_cat)){

VARIABLE <- datos_tot[,colnames(datos_tot)==nombres_cat[i]]

tabla_match <- aggregate(datos_tot$TARGET,
                         by=list(VARIABLE),
                         median)

datos_tot[,colnames(datos_tot)==nombres_cat[i]]<-tabla_match$x[match(VARIABLE,tabla_match$Group.1)]

print(i)

}
 

contents(datos_tot)->resumen

table(resumen$class)


#### PRIMER CRITERIO TRAIN Y TEST: VENTANAS 2 A 5 TRAIN, VENTANA 7 VAL ####

datos_tot_train <- subset(datos_tot,datos_tot$ventana %in% 2:5)

datos_tot_val <- subset(datos_tot,datos_tot$ventana==7)

# Empiezo a probar modelos 


#### MOD_1 ####

nombres <- colnames(datos_tot_train[,c(3,7:(ncol(datos_tot_train)-1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]


# Regresion

MOD_1 <- lm(TARGET~.,
            data = datos_tot_train[,nombres])

summary(MOD_1) -> sum_MOD_1

sum_MOD_1$coefficients -> COEF_MOD_1
COEF_MOD_1

# write.table(COEF_MOD_1,"COEF_MOD_1.csv",sep=";",row.names = FALSE)

PREDICCIONES_TRAIN <- predict(MOD_1,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_1,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                             ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)


# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_2 ####

round(COEF_MOD_1[order(COEF_MOD_1[,4],decreasing = TRUE),],2)

# Regresion

nombres_final <- nombres[!nombres %in% rownames(COEF_MOD_1)[COEF_MOD_1[,4]>0.001]]
nombres_final <- nombres_final[!nombres_final%in%c("Cant_Auctions_03hs","Cant_Auctions_07_13hs","Cant_Auctions_14_22hs","Cant_Wifi")]

MOD_2 <- lm(TARGET~.,
            data = datos_tot_train[,colnames(datos_tot_train) %in% nombres_final])

summary(MOD_2) -> sum_MOD_2

sum_MOD_2$coefficients -> COEF_MOD_2
round(COEF_MOD_2,4)

# write.table(COEF_MOD_2,"COEF_MOD_2.csv",sep=";",row.names = TRUE)

# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_2,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_2,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL


#### MOD_3 ####

# Regresion con transformacion logaritmica

MOD_3 <- lm(log1p(TARGET)~.,
            data = datos_tot_train[,colnames(datos_tot_train) %in% nombres_final])

summary(MOD_3) -> sum_MOD_3

sum_MOD_3$coefficients -> COEF_MOD_3
round(COEF_MOD_3,4)

# write.table(COEF_MOD_2,"COEF_MOD_2.csv",sep=";",row.names = TRUE)

# Predicciones

PREDICCIONES_TRAIN <- exp(predict(MOD_3,datos_tot_train))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- exp(predict(MOD_3,datos_tot_val))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL


#### MOD_4 ####

nombres <- colnames(datos_tot_train[,c(3,7:(ncol(datos_tot_train)-1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

# RANDOM FOREST

library(ranger)

set.seed(125)

MOD_4 <- ranger(TARGET ~ .,
                data = datos_tot_train[,colnames(datos_tot_train) %in% nombres],
                mtry = 10,
                min.node.size = 0.005*nrow(datos_tot_train),
                num.trees = 500,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia_MOD_4 <- MOD_4$variable.importance
importancia_MOD_4[order(importancia_MOD_4,decreasing = TRUE)][1:20]


# Predicciones

PREDICCIONES_TRAIN <- predictions(MOD_4,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_4,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- PREDICCIONES_VAL$predictions
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_5 ####

datos_tot_train$TARGET_LOG <- log(datos_tot_train$TARGET)

hist(datos_tot_train$TARGET_LOG)

nombres <- colnames(datos_tot_train[,c(7:(ncol(datos_tot_train)-2),ncol(datos_tot_train))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]


# RANDOM FOREST

library(ranger)

set.seed(125)

MOD_5 <- ranger(TARGET_LOG ~ .,
                data = datos_tot_train[,colnames(datos_tot_train) %in% nombres],
                mtry = 10,
                min.node.size = 0.005*nrow(datos_tot_train),
                num.trees = 500,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia_MOD_5 <- MOD_5$variable.importance
importancia_MOD_5[order(importancia_MOD_5,decreasing = TRUE)][1:20]


# Predicciones

PREDICCIONES_TRAIN <- exp(predictions(MOD_5,datos_tot_train))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_5,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- exp(PREDICCIONES_VAL$predictions)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_6 ####

nombres <- colnames(datos_tot_train[,c(3,7:(ncol(datos_tot_train)-2))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

# RANDOM FOREST

library(ranger)

set.seed(125)

MOD_6 <- ranger(TARGET ~ .,
                data = datos_tot_train[,colnames(datos_tot_train) %in% nombres],
                mtry = 15,
                min.node.size = 0.005*nrow(datos_tot_train),
                num.trees = 500,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia_MOD_6 <- MOD_6$variable.importance
importancia_MOD_6[order(importancia_MOD_6,decreasing = TRUE)][1:20]


# Predicciones

PREDICCIONES_TRAIN <- predictions(MOD_6,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_6,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- PREDICCIONES_VAL$predictions
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL


#### MOD_7 ####

nombres <- colnames(datos_tot_train[,c(3,7:(ncol(datos_tot_train)-2))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

# RANDOM FOREST

library(ranger)

set.seed(125)

MOD_7 <- ranger(TARGET ~ .,
                data = datos_tot_train[,colnames(datos_tot_train) %in% nombres],
                mtry = 5,
                min.node.size = 0.005*nrow(datos_tot_train),
                num.trees = 500,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia_MOD_7 <- MOD_7$variable.importance
importancia_MOD_7[order(importancia_MOD_7,decreasing = TRUE)][1:5]


# Predicciones

PREDICCIONES_TRAIN <- predictions(MOD_7,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_7,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- PREDICCIONES_VAL$predictions
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_8 ####

# RANDOM FOREST

library(ranger)

set.seed(125)

MOD_8 <- ranger(TARGET ~ .,
                data = datos_tot_train[,colnames(datos_tot_train) %in% nombres],
                mtry = 15,
                min.node.size = 0.0005*nrow(datos_tot_train),
                num.trees = 500,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia_MOD_8 <- MOD_8$variable.importance
importancia_MOD_8[order(importancia_MOD_8,decreasing = TRUE)][1:5]


# Predicciones

PREDICCIONES_TRAIN <- predictions(MOD_8,datos_tot_train)
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_8,datos_tot_val)
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- PREDICCIONES_VAL$predictions
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL


#### MOD_9 ####

# XGBOOST

library(xgboost)

TARGET <- datos_tot_train$TARGET

nombres_xg <- nombres[!nombres %in% c("TARGET")]

set.seed(125)

MOD_9 <- xgboost(data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]), 
                 label = TARGET,
                 booster = "gbtree", 
                 objective = "reg:linear",
                 colsample_bytree = 0.15, 
                 gamma = 0.02,
                 learning_rate = 0.075,
                 max_depth = 8,
                 min_child_weight = 1.5, 
                 reg_alpha = 0.6, 
                 reg_lambda = 0.6,
                 subsample = 0.3,
                 silent = 1, 
                 nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_9,data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_9,data.matrix(datos_tot_val[,colnames(datos_tot_val)%in%nombres_xg]))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_10 ####

nombres <- colnames(datos_tot_train[,c(7:(ncol(datos_tot_train)-2),ncol(datos_tot_train))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

# XGBOOST

library(xgboost)

TARGET <- datos_tot_train$TARGET

nombres_xg <- nombres[!nombres %in% c("TARGET")]

set.seed(125)

MOD_10 <- xgboost(data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]), 
                 label = TARGET,
                 booster = "gbtree", 
                 objective = "reg:linear",
                 colsample_bytree = 0.15, 
                 gamma = 0.02,
                 learning_rate = 0.075,
                 max_depth = 8,
                 min_child_weight = 1.5, 
                 reg_alpha = 0.6, 
                 reg_lambda = 0.6,
                 subsample = 0.5,
                 silent = 1, 
                 nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_10,data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_10,data.matrix(datos_tot_val[,colnames(datos_tot_val)%in%nombres_xg]))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL

# Exporto modelo ganador

saveRDS(MOD_10,"MODELO_GANADOR_1_V12.rds")


#### MOD_11 #### 

#### REARMO LA MUESTRA DE ENTRENAMIENTO 

datos_tot_train <- subset(datos_tot,datos_tot$ventana %in% 2:4)
datos_tot_train <- datos_tot_train[order(datos_tot_train$TARGET),]

datos_tot_train <- subset(datos_tot_train,duplicated(datos_tot_train$device_id)==FALSE)


datos_tot_val <- subset(datos_tot,datos_tot$ventana==7)


nombres <- colnames(datos_tot_train[,c(7:(ncol(datos_tot_train)-2),ncol(datos_tot_train))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

# XGBOOST

library(xgboost)

TARGET <- datos_tot_train$TARGET

nombres <- colnames(datos_tot_train[,c(7:(ncol(datos_tot_train)-2),ncol(datos_tot_train))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction")]
nombres_xg <- nombres[!nombres %in% c("TARGET")]

set.seed(125)

MOD_11 <- xgboost(data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]), 
                  label = TARGET,
                  booster = "gbtree", 
                  objective = "reg:linear",
                  colsample_bytree = 0.15, 
                  gamma = 0.02,
                  learning_rate = 0.075,
                  max_depth = 8,
                  min_child_weight = 1.5, 
                  reg_alpha = 0.6, 
                  reg_lambda = 0.6,
                  subsample = 0.5,
                  silent = 1, 
                  nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11,data.matrix(datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg]))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11,data.matrix(datos_tot_val[,colnames(datos_tot_val)%in%nombres_xg]))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL


saveRDS(MOD_11,"MODELO_GANADOR_1_V14.rds")


















#### MOD_11 ####

#### PROBAR ENSAMBLE 

# FEATURE: REG_1

REG_1 <- lm(log1p(TARGET)~
              log1p(Cant_Auctions_Ult24Hs)+
              log1p(Cant_Auctions_Ult18Hs)+
              log1p(Time_UltAuction)+
              log1p(Cant_Auctions_Ult48Hs)+
              log1p(Cant_Auctions_Ult12Hs)-1,
            data = datos_tot_train)

summary(REG_1) -> sum_REG_1

sum_REG_1$coefficients -> COEF_REG_1
COEF_REG_1

PREDICCIONES_TRAIN_REG_1 <- exp(predict(REG_1,datos_tot_train))
summary(PREDICCIONES_TRAIN_REG_1)


PREDICCIONES_VAL_REG_1 <- exp(predict(REG_1,datos_tot_val))
summary(PREDICCIONES_VAL_REG_1)

#### MODELO

nombres <- colnames(datos_tot_train[,c(7:(ncol(datos_tot_train)-2),ncol(datos_tot_train))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

# XGBOOST

library(xgboost)

TARGET <- datos_tot_train$TARGET

nombres_xg <- nombres[!nombres %in% c("TARGET")]

set.seed(125)

MOD_11 <- xgboost(data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                         datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg])), 
                  label = TARGET,
                  booster = "gbtree", 
                  objective = "reg:linear",
                  colsample_bytree = 0.15, 
                  gamma = 0.02,
                  learning_rate = 0.075,
                  max_depth = 8,
                  min_child_weight = 1.5, 
                  reg_alpha = 0.6, 
                  reg_lambda = 0.6,
                  subsample = 0.5,
                  silent = 1, 
                  nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11,data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                                            datos_tot_train[,colnames(datos_tot_train) %in% nombres_xg])))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11,data.matrix(data.frame(REG_1=PREDICCIONES_VAL_REG_1,
                                                          datos_tot_val[,colnames(datos_tot_val)%in%nombres_xg])))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_val$TARGET,PREDICCIONES_VAL)
RMSE_VAL



#### MOD_11 ENSAMBLE ####

#### PROBAR ENSAMBLE 

datos_tot_train_1 <- subset(datos_tot,datos_tot$ventana==2)
datos_tot_train_2 <- subset(datos_tot,datos_tot$ventana==3)
datos_tot_train_3 <- subset(datos_tot,datos_tot$ventana==4)
datos_tot_train_4 <- subset(datos_tot,datos_tot$ventana==5)
datos_tot_train_5 <- subset(datos_tot,datos_tot$ventana==6)

####### MODELO 1 ####

REG_11_1 <- lm(TARGET~
              Cant_Auctions_Ult24Hs+
              Time_UltAuction+
              Time_UltEvents+
              Prop_Auctions_14a22+
              Prop_Auctions_07a13+
              
              Cant_Auctions_UltCuartoHs-1,
            data = datos_tot_train_1)

summary(REG_11_1) -> sum_REG_1

sum_REG_1$coefficients -> COEF_REG_1
round(COEF_REG_1,4)

PREDICCIONES_TRAIN_REG_1 <- predict(REG_11_1,datos_tot_train_1)
summary(PREDICCIONES_TRAIN_REG_1)
PREDICCIONES_TRAIN_REG_1 <- ifelse(PREDICCIONES_TRAIN_REG_1<0,0,
                             ifelse(PREDICCIONES_TRAIN_REG_1>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN_REG_1))
summary(PREDICCIONES_TRAIN_REG_1)


PREDICCIONES_VAL_REG_1 <- predict(REG_11_1,datos_tot_train_2)
summary(PREDICCIONES_VAL_REG_1)
PREDICCIONES_VAL_REG_1 <- ifelse(PREDICCIONES_VAL_REG_1<0,0,
                                   ifelse(PREDICCIONES_VAL_REG_1>60*60*24*3,60*60*24*3,
                                          PREDICCIONES_VAL_REG_1))
summary(PREDICCIONES_VAL_REG_1)

RMSE_TRAIN <- rmse(datos_tot_train_1$TARGET,PREDICCIONES_TRAIN_REG_1)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_2$TARGET,PREDICCIONES_VAL_REG_1)
RMSE_VAL


#### MODELO XGBOOST

nombres <- colnames(datos_tot_train_1[,c(7:(ncol(datos_tot_train_1)-1),ncol(datos_tot_train_1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

library(xgboost)

TARGET <- datos_tot_train_1$TARGET

set.seed(12)

MOD_11_1 <- xgboost(data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                           datos_tot_train_1[,colnames(datos_tot_train_1) %in% nombres_xg])), 
                  label = TARGET,
                  booster = "gbtree", 
                  objective = "reg:linear",
                  colsample_bytree = 0.15, 
                  gamma = 0.02,
                  learning_rate = 0.075,
                  max_depth = 8,
                  min_child_weight = 1.5, 
                  reg_alpha = 0.6, 
                  reg_lambda = 0.6,
                  subsample = 0.5,
                  silent = 1, 
                  nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11_1,data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                                              datos_tot_train_1[,colnames(datos_tot_train_1) %in% nombres_xg])))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11_1,data.matrix(data.frame(REG_1=PREDICCIONES_VAL_REG_1,
                                                          datos_tot_train_2[,colnames(datos_tot_train_2)%in%nombres_xg])))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train_1$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_2$TARGET,PREDICCIONES_VAL)
RMSE_VAL


####### MODELO 2 ####

REG_11_2 <- lm(TARGET~
              Cant_Auctions_Ult24Hs+
              Time_UltAuction+
              Time_UltEvents+
              Prop_Auctions_14a22+
              Prop_Auctions_07a13+
              
              Cant_Auctions_UltCuartoHs-1,
            data = datos_tot_train_2)

summary(REG_11_2) -> sum_REG_1

sum_REG_1$coefficients -> COEF_REG_1
round(COEF_REG_1,4)

PREDICCIONES_TRAIN_REG_1 <- predict(REG_11_2,datos_tot_train_2)
summary(PREDICCIONES_TRAIN_REG_1)
PREDICCIONES_TRAIN_REG_1 <- ifelse(PREDICCIONES_TRAIN_REG_1<0,0,
                                   ifelse(PREDICCIONES_TRAIN_REG_1>60*60*24*3,60*60*24*3,
                                          PREDICCIONES_TRAIN_REG_1))
summary(PREDICCIONES_TRAIN_REG_1)


PREDICCIONES_VAL_REG_1 <- predict(REG_11_2,datos_tot_train_3)
summary(PREDICCIONES_VAL_REG_1)
PREDICCIONES_VAL_REG_1 <- ifelse(PREDICCIONES_VAL_REG_1<0,0,
                                 ifelse(PREDICCIONES_VAL_REG_1>60*60*24*3,60*60*24*3,
                                        PREDICCIONES_VAL_REG_1))
summary(PREDICCIONES_VAL_REG_1)

RMSE_TRAIN <- rmse(datos_tot_train_2$TARGET,PREDICCIONES_TRAIN_REG_1)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_3$TARGET,PREDICCIONES_VAL_REG_1)
RMSE_VAL


#### MODELO XGBOOST

nombres <- colnames(datos_tot_train_1[,c(7:(ncol(datos_tot_train_1)-1),ncol(datos_tot_train_1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

library(xgboost)

TARGET <- datos_tot_train_2$TARGET

set.seed(12)

MOD_11_2 <- xgboost(data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                           datos_tot_train_2[,colnames(datos_tot_train_2) %in% nombres_xg])), 
                    label = TARGET,
                    booster = "gbtree", 
                    objective = "reg:linear",
                    colsample_bytree = 0.15, 
                    gamma = 0.02,
                    learning_rate = 0.075,
                    max_depth = 8,
                    min_child_weight = 1.5, 
                    reg_alpha = 0.6, 
                    reg_lambda = 0.6,
                    subsample = 0.5,
                    silent = 1, 
                    nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11_2,data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                                              datos_tot_train_2[,colnames(datos_tot_train_2) %in% nombres_xg])))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11_2,data.matrix(data.frame(REG_1=PREDICCIONES_VAL_REG_1,
                                                            datos_tot_train_3[,colnames(datos_tot_train_3)%in%nombres_xg])))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train_2$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_3$TARGET,PREDICCIONES_VAL)
RMSE_VAL


####### MODELO 3 ####

REG_11_3 <- lm(TARGET~
                 Cant_Auctions_Ult24Hs+
                 Time_UltAuction+
                 Time_UltEvents+
                 Prop_Auctions_14a22+
                 Prop_Auctions_07a13+
                 
                 Cant_Auctions_UltCuartoHs-1,
               data = datos_tot_train_2)

summary(REG_11_3) -> sum_REG_1

sum_REG_1$coefficients -> COEF_REG_1
round(COEF_REG_1,4)

PREDICCIONES_TRAIN_REG_1 <- predict(REG_11_3,datos_tot_train_3)
summary(PREDICCIONES_TRAIN_REG_1)
PREDICCIONES_TRAIN_REG_1 <- ifelse(PREDICCIONES_TRAIN_REG_1<0,0,
                                   ifelse(PREDICCIONES_TRAIN_REG_1>60*60*24*3,60*60*24*3,
                                          PREDICCIONES_TRAIN_REG_1))
summary(PREDICCIONES_TRAIN_REG_1)


PREDICCIONES_VAL_REG_1 <- predict(REG_11_3,datos_tot_train_4)
summary(PREDICCIONES_VAL_REG_1)
PREDICCIONES_VAL_REG_1 <- ifelse(PREDICCIONES_VAL_REG_1<0,0,
                                 ifelse(PREDICCIONES_VAL_REG_1>60*60*24*3,60*60*24*3,
                                        PREDICCIONES_VAL_REG_1))
summary(PREDICCIONES_VAL_REG_1)

RMSE_TRAIN <- rmse(datos_tot_train_3$TARGET,PREDICCIONES_TRAIN_REG_1)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_4$TARGET,PREDICCIONES_VAL_REG_1)
RMSE_VAL


#### MODELO XGBOOST

nombres <- colnames(datos_tot_train_1[,c(7:(ncol(datos_tot_train_1)-1),ncol(datos_tot_train_1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

library(xgboost)

TARGET <- datos_tot_train_3$TARGET

set.seed(12)

MOD_11_3 <- xgboost(data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                           datos_tot_train_3[,colnames(datos_tot_train_3) %in% nombres_xg])), 
                    label = TARGET,
                    booster = "gbtree", 
                    objective = "reg:linear",
                    colsample_bytree = 0.15, 
                    gamma = 0.02,
                    learning_rate = 0.075,
                    max_depth = 8,
                    min_child_weight = 1.5, 
                    reg_alpha = 0.6, 
                    reg_lambda = 0.6,
                    subsample = 0.5,
                    silent = 1, 
                    nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11_3,data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                                              datos_tot_train_3[,colnames(datos_tot_train_3) %in% nombres_xg])))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11_3,data.matrix(data.frame(REG_1=PREDICCIONES_VAL_REG_1,
                                                            datos_tot_train_4[,colnames(datos_tot_train_4)%in%nombres_xg])))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train_3$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_4$TARGET,PREDICCIONES_VAL)
RMSE_VAL


####### MODELO 4 ####

REG_11_4 <- lm(TARGET~
                 Cant_Auctions_Ult24Hs+
                 Time_UltAuction+
                 Time_UltEvents+
                 Prop_Auctions_14a22+
                 Prop_Auctions_07a13+
                 
                 Cant_Auctions_UltCuartoHs-1,
               data = datos_tot_train_2)

summary(REG_11_4) -> sum_REG_1

sum_REG_1$coefficients -> COEF_REG_1
round(COEF_REG_1,4)

PREDICCIONES_TRAIN_REG_1 <- predict(REG_11_4,datos_tot_train_4)
summary(PREDICCIONES_TRAIN_REG_1)
PREDICCIONES_TRAIN_REG_1 <- ifelse(PREDICCIONES_TRAIN_REG_1<0,0,
                                   ifelse(PREDICCIONES_TRAIN_REG_1>60*60*24*3,60*60*24*3,
                                          PREDICCIONES_TRAIN_REG_1))
summary(PREDICCIONES_TRAIN_REG_1)


PREDICCIONES_VAL_REG_1 <- predict(REG_11_4,datos_tot_train_5)
summary(PREDICCIONES_VAL_REG_1)
PREDICCIONES_VAL_REG_1 <- ifelse(PREDICCIONES_VAL_REG_1<0,0,
                                 ifelse(PREDICCIONES_VAL_REG_1>60*60*24*3,60*60*24*3,
                                        PREDICCIONES_VAL_REG_1))
summary(PREDICCIONES_VAL_REG_1)

RMSE_TRAIN <- rmse(datos_tot_train_4$TARGET,PREDICCIONES_TRAIN_REG_1)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_5$TARGET,PREDICCIONES_VAL_REG_1)
RMSE_VAL


#### MODELO XGBOOST

nombres <- colnames(datos_tot_train_1[,c(7:(ncol(datos_tot_train_1)-1),ncol(datos_tot_train_1))])
nombres <- nombres[!nombres %in% c("Tuvo_Auction","Time_UltClick")]

nombres_xg <- nombres[!nombres %in% c("TARGET")]

library(xgboost)

TARGET <- datos_tot_train_4$TARGET

set.seed(12)

MOD_11_4 <- xgboost(data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                           datos_tot_train_4[,colnames(datos_tot_train_4) %in% nombres_xg])), 
                    label = TARGET,
                    booster = "gbtree", 
                    objective = "reg:linear",
                    colsample_bytree = 0.15, 
                    gamma = 0.02,
                    learning_rate = 0.075,
                    max_depth = 8,
                    min_child_weight = 1.5, 
                    reg_alpha = 0.6, 
                    reg_lambda = 0.6,
                    subsample = 0.5,
                    silent = 1, 
                    nrounds = 150)


# Predicciones

PREDICCIONES_TRAIN <- predict(MOD_11_4,data.matrix(data.frame(REG_1=PREDICCIONES_TRAIN_REG_1,
                                                              datos_tot_train_4[,colnames(datos_tot_train_4) %in% nombres_xg])))
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11_4,data.matrix(data.frame(REG_1=PREDICCIONES_VAL_REG_1,
                                                            datos_tot_train_5[,colnames(datos_tot_train_5)%in%nombres_xg])))
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)

# CALCULO RMSE

RMSE_TRAIN <- rmse(datos_tot_train_4$TARGET,PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(datos_tot_train_5$TARGET,PREDICCIONES_VAL)
RMSE_VAL


#### ARMO LAS PREDICCIONES TOTALES ####

P_REG_1 <- predict(REG_11_1,datos_tot)
P_REG_1 <- ifelse(P_REG_1<0,0,
                  ifelse(P_REG_1>60*60*24*3,60*60*24*3,
                         P_REG_1))

P_REG_2 <- predict(REG_11_2,datos_tot)
P_REG_2 <- ifelse(P_REG_2<0,0,
                  ifelse(P_REG_2>60*60*24*3,60*60*24*3,
                         P_REG_2))

P_REG_3 <- predict(REG_11_3,datos_tot)
P_REG_3 <- ifelse(P_REG_3<0,0,
                  ifelse(P_REG_3>60*60*24*3,60*60*24*3,
                         P_REG_3))

P_REG_4 <- predict(REG_11_4,datos_tot)
P_REG_4 <- ifelse(P_REG_4<0,0,
                  ifelse(P_REG_4>60*60*24*3,60*60*24*3,
                         P_REG_4))


P_XG_1 <- predict(MOD_11_1,data.matrix(data.frame(REG_1=P_REG_1,
                                                  datos_tot[,colnames(datos_tot) %in% nombres_xg])))
P_XG_1 <- ifelse(P_XG_1<0,0,
                 ifelse(P_XG_1>60*60*24*3,60*60*24*3,
                        P_XG_1))


P_XG_2 <- predict(MOD_11_2,data.matrix(data.frame(REG_1=P_REG_2,
                                                  datos_tot[,colnames(datos_tot) %in% nombres_xg])))
P_XG_2 <- ifelse(P_XG_2<0,0,
                 ifelse(P_XG_2>60*60*24*3,60*60*24*3,
                        P_XG_2))


P_XG_3 <- predict(MOD_11_3,data.matrix(data.frame(REG_1=P_REG_3,
                                                  datos_tot[,colnames(datos_tot) %in% nombres_xg])))
P_XG_3 <- ifelse(P_XG_3<0,0,
                 ifelse(P_XG_3>60*60*24*3,60*60*24*3,
                        P_XG_3))


P_XG_4 <- predict(MOD_11_4,data.matrix(data.frame(REG_1=P_REG_4,
                                                  datos_tot[,colnames(datos_tot) %in% nombres_xg])))
P_XG_4 <- ifelse(P_XG_4<0,0,
                 ifelse(P_XG_4>60*60*24*3,60*60*24*3,
                        P_XG_4))




PREDICCIONES_TOTALES <- data.frame(TARGET=datos_tot$TARGET,
                                   VENTANA=datos_tot$ventana,
                                   P_XG_1,
                                   P_XG_2,
                                   P_XG_3,
                                   P_XG_4)

#### RANDOM FOREST ####

library(ranger)

set.seed(12)

MOD_11_RF <- ranger(TARGET ~ .,
                data = PREDICCIONES_TOTALES[PREDICCIONES_TOTALES$VENTANA%in%c(2:5),c(1,3:6)],
                mtry = 2,
                min.node.size = 0.005*nrow(PREDICCIONES_TOTALES),
                num.trees = 70,
                replace = FALSE,
                importance = 'impurity',
                dependent.variable.name = TARGET)

importancia <- MOD_11_RF$variable.importance
importancia[order(importancia,decreasing = TRUE)]


# Predicciones

PREDICCIONES_TRAIN <- predictions(MOD_11_RF,PREDICCIONES_TOTALES[PREDICCIONES_TOTALES$VENTANA%in%c(2:5),c(1,3:6)])
summary(PREDICCIONES_TRAIN)
PREDICCIONES_TRAIN <- ifelse(PREDICCIONES_TRAIN<0,0,
                             ifelse(PREDICCIONES_TRAIN>60*60*24*3,60*60*24*3,
                                    PREDICCIONES_TRAIN))
summary(PREDICCIONES_TRAIN)

PREDICCIONES_VAL <- predict(MOD_11_RF,PREDICCIONES_TOTALES[PREDICCIONES_TOTALES$VENTANA%in%7,c(1,3:6)])
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- PREDICCIONES_VAL$predictions
summary(PREDICCIONES_VAL)
PREDICCIONES_VAL <- ifelse(PREDICCIONES_VAL<0,0,
                           ifelse(PREDICCIONES_VAL>60*60*24*3,60*60*24*3,
                                  PREDICCIONES_VAL))
summary(PREDICCIONES_VAL)



RMSE_TRAIN <- rmse(PREDICCIONES_TOTALES$TARGET[PREDICCIONES_TOTALES$VENTANA%in%c(2:5)],PREDICCIONES_TRAIN)
RMSE_TRAIN

RMSE_VAL <- rmse(PREDICCIONES_TOTALES$TARGET[PREDICCIONES_TOTALES$VENTANA%in%7],PREDICCIONES_VAL)
RMSE_VAL
